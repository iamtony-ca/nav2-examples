<?xml version="1.0"?>
<library path="run_if_flag_true_decorator">
  <class name="amr_bt_nodes::RunIfFlagTrueDecorator"
         type="amr_bt_nodes::RunIfFlagTrueDecorator"
         base_class_type="BT::DecoratorNode">
    <description>Run child only if flag is true</description>
  </class>
</library>

<library path="check_flag_condition">
  <class name="amr_bt_nodes::CheckFlagCondition"
         type="amr_bt_nodes::CheckFlagCondition"
         base_class_type="BT::ConditionNode">
    <description>Return SUCCESS if flag is true, otherwise FAILURE</description>
  </class>
</library>

<library path="trigger_planner_decorator">
  <class name="amr_bt_nodes::TriggerPlannerDecorator"
         type="amr_bt_nodes::TriggerPlannerDecorator"
         base_class_type="BT::DecoratorNode">
    <description>Trigger child node when flag is true</description>
  </class>
</library>


<library path="smart_recovery_action_node">
  <class name="amr_bt_nodes::SmartRecoveryAction"
         type="amr_bt_nodes::SmartRecoveryAction"
         base_class_type="BT::ActionNodeBase">
    <description>Smart recovery action node (uses robot_interfaces/SmartRecovery)</description>
  </class>
</library>

<library path="set_truncated_goal_from_path">
  <class name="amr_bt_nodes::SetTruncatedGoalFromPath"
         type="amr_bt_nodes::SetTruncatedGoalFromPath"
         base_class_type="BT::SyncActionNode">
    <description>Extracts last pose from a truncated path and sets it to a goal key on the blackboard.</description>
  </class>
</library>


<library path="is_path_valid_condition">
  <class name="amr_bt_nodes::IsPathValidCondition"
         type="amr_bt_nodes::IsPathValidCondition"
         base_class_type="BT::ConditionNode">
    <description>Check if the provided path is non-empty</description>
  </class>
</library>


<library path="prune_passed_path_action">
  <class name="amr_bt_nodes::PrunePassedPathAction" type="amr_bt_nodes::PrunePassedPathAction" base_class_type="BT::SyncActionNode">
    <description>Prunes the beginning of the path based on the robot's current position.</description>
  </class>
</library>


<library path="log_text_action">
  <class name="amr_bt_nodes::LogTextAction" type="amr_bt_nodes::LogTextAction" base_class_type="BT::SyncActionNode">
    <description>
      A custom BehaviorTree Action node that logs a given text message to the terminal.
      Useful for debugging and informational purposes within the behavior tree.
    </description>
  </class>
</library>


<library path="path_publisher_action">
  <class name="amr_bt_nodes::PathPublisherAction" type="amr_bt_nodes::PathPublisherAction" base_class_type="BT::SyncActionNode">
    <description>
      PathPublisherAction is a BehaviorTree action node that publishes a path to a specified topic.
    </description>
  </class>
</library>


<library path="trigger_receiver_and_parser">
    <class name="amr_bt_nodes::TriggerReceiverAndParser" type="amr_bt_nodes::TriggerReceiverAndParser" base_class_type="BT::ActionNodeBase">
        <description>
            A custom Behavior Tree Action Node that subscribes to a ROS2 topic for trigger messages,
            parses planner/controller IDs, updates the Blackboard, publishes a response,
            and can also trigger a ROS2 service call for mode changes.
        </description>
    </class>
</library>


<library path="is_blackaboard_changed_condition">
    <class name="amr_bt_nodes::IsBlackboardChangedCondition" type="amr_bt_nodes::IsBlackboardChangedCondition" base_class_type="BT::ConditionNode">
        <description>
            Condition node that checks if a specific key in the Blackboard has changed since the last tick.
            If the value has changed, it returns SUCCESS; otherwise, it returns FAILURE.
            This is useful for triggering actions only when certain data in the Blackboard is updated.
        </description>
    </class>
</library>


<library path="string_publisher_action">
  <class name="amr_bt_nodes::StringPublisherAction" type="amr_bt_nodes::StringPublisherAction" base_class_type="BT::SyncActionNode">
    <description>Publishes a string message a specified number of times.</description>
  </class>
</library>


<library path="get_next_few_goals_action">
  <class name="amr_bt_nodes::GetNextFewGoalsAction" type="amr_bt_nodes::GetNextFewGoalsAction" base_class_type="BT::SyncActionNode">
    <description>
      A BT node that gets a specified number of goals from the beginning of a goal list.
    </description>
  </class>
</library>


<library path="remove_first_goal_action">
  <class name="amr_bt_nodes::RemoveFirstGoalAction"
         type="amr_bt_nodes::RemoveFirstGoalAction"
         base_class_type="BT::SyncActionNode">
    <description>
      A BT node that removes the first element from a list of goals.
    </description>
  </class>
</library>


<library path="replan_guard_decorator">
  <class name="amr_bt_nodes::ReplanGuardDecorator" type="amr_bt_nodes::ReplanGuardDecorator" base_class_type="BT::DecoratorNode">
    <description>
      A decorator that triggers its child only when the final goal in a sequence changes, a replan flag is received, or a specific blackboard status (like 'recovery_mode') is set.
    </description>
  </class>
</library>

<library path="advanced_remove_passed_goals_action">
  <class name="amr_bt_nodes::AdvancedRemovePassedGoalsAction"
         type="amr_bt_nodes::AdvancedRemovePassedGoalsAction"
         base_class_type="BT::StatefulActionNode">
    <description>
      A BT node to robustly remove passed goals based on path progress, a search window, and hysteresis.
    </description>
  </class>
</library>